%%
%% Autogenerated by Thrift Compiler (0.9.1)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(game_thrift).
-behaviour(thrift_service).


-include("game_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info('i am a dummy struct') -> undefined.
%%% interface
% get_message(This, Name)
function_info('get_message', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_message', reply_type) ->
  string;
function_info('get_message', exceptions) ->
  {struct, []}
;
% get_protocol_version(This)
function_info('get_protocol_version', params_type) ->
  {struct, []}
;
function_info('get_protocol_version', reply_type) ->
  i32;
function_info('get_protocol_version', exceptions) ->
  {struct, []}
;
% login(This, Pro_ver, Account, Password)
function_info('login', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string}]}
;
function_info('login', reply_type) ->
  i64;
function_info('login', exceptions) ->
  {struct, [{1, {struct, {'game_types', 'login_exception'}}}]}
;
% login_by_gamecenter(This, Pro_ver, User_id, Name, Password, Accout_platform, Area)
function_info('login_by_gamecenter', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string},
          {4, string},
          {5, string},
          {6, string}]}
;
function_info('login_by_gamecenter', reply_type) ->
  i64;
function_info('login_by_gamecenter', exceptions) ->
  {struct, [{1, {struct, {'game_types', 'login_exception'}}}]}
;
% login_by_device(This, Pro_ver, Device_token, Platform, Area)
function_info('login_by_device', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, i32},
          {4, string}]}
;
function_info('login_by_device', reply_type) ->
  i64;
function_info('login_by_device', exceptions) ->
  {struct, [{1, {struct, {'game_types', 'login_exception'}}}]}
;
% reconnect(This, Account, Password)
function_info('reconnect', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('reconnect', reply_type) ->
  i64;
function_info('reconnect', exceptions) ->
  {struct, []}
;
% reconnect_by_device(This, Device_token, Platform, Area)
function_info('reconnect_by_device', params_type) ->
  {struct, [{1, string},
          {2, i32},
          {3, string}]}
;
function_info('reconnect_by_device', reply_type) ->
  i64;
function_info('reconnect_by_device', exceptions) ->
  {struct, []}
;
% logout(This)
function_info('logout', params_type) ->
  {struct, []}
;
function_info('logout', reply_type) ->
  oneway_void;
function_info('logout', exceptions) ->
  {struct, []}
;
% heartbeat(This)
function_info('heartbeat', params_type) ->
  {struct, []}
;
function_info('heartbeat', reply_type) ->
  oneway_void;
function_info('heartbeat', exceptions) ->
  {struct, []}
;
% get_server_time(This)
function_info('get_server_time', params_type) ->
  {struct, []}
;
function_info('get_server_time', reply_type) ->
  {struct, {'game_types', 'datetime'}};
function_info('get_server_time', exceptions) ->
  {struct, []}
;
% get_server_time_tick(This)
function_info('get_server_time_tick', params_type) ->
  {struct, []}
;
function_info('get_server_time_tick', reply_type) ->
  i64;
function_info('get_server_time_tick', exceptions) ->
  {struct, []}
;
% get_player(This, Id)
function_info('get_player', params_type) ->
  {struct, [{1, i64}]}
;
function_info('get_player', reply_type) ->
  {struct, {'game_types', 'player'}};
function_info('get_player', exceptions) ->
  {struct, []}
;
% set_player_name(This, New_player_name)
function_info('set_player_name', params_type) ->
  {struct, [{1, string}]}
;
function_info('set_player_name', reply_type) ->
  bool;
function_info('set_player_name', exceptions) ->
  {struct, [{1, {struct, {'game_types', 'set_player_name_exception'}}}]}
;
% get_exception(This, Id)
function_info('get_exception', params_type) ->
  {struct, [{1, i32}]}
;
function_info('get_exception', reply_type) ->
  {struct, []};
function_info('get_exception', exceptions) ->
  {struct, [{1, {struct, {'game_types', 'get_player_exception'}}}]}
;
% feedback(This, Message, Image_title, Image, Log)
function_info('feedback', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string}]}
;
function_info('feedback', reply_type) ->
  {struct, []};
function_info('feedback', exceptions) ->
  {struct, [{1, {struct, {'game_types', 'feedback_exception'}}}]}
;
function_info(_Func, _Info) -> no_function.

