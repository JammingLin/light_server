/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "proc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace thrift { namespace test {


MyError::~MyError() throw() {
}


void MyError::__set_message(const std::string& val) {
  this->message = val;
}

const char* MyError::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MyError::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

void swap(MyError &a, MyError &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

MyError::MyError(const MyError& other0) : TException() {
  message = other0.message;
  __isset = other0.__isset;
}
MyError& MyError::operator=(const MyError& other1) {
  message = other1.message;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MyError& obj) {
  using apache::thrift::to_string;
  out << "MyError(";
  out << "message=" << to_string(obj.message);
  out << ")";
  return out;
}

}}} // namespace
