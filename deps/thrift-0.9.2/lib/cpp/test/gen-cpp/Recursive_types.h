/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Recursive_TYPES_H
#define Recursive_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class RecTree;

class RecList;

class CoRec;

class CoRec2;

class VectorTest;

typedef struct _RecTree__isset {
  _RecTree__isset() : children(false), item(false) {}
  bool children :1;
  bool item :1;
} _RecTree__isset;

class RecTree {
 public:

  static const char* ascii_fingerprint; // = "39466DEA0D320B18D672142745F82236";
  static const uint8_t binary_fingerprint[16]; // = {0x39,0x46,0x6D,0xEA,0x0D,0x32,0x0B,0x18,0xD6,0x72,0x14,0x27,0x45,0xF8,0x22,0x36};

  RecTree(const RecTree&);
  RecTree& operator=(const RecTree&);
  RecTree() : item(0) {
  }

  virtual ~RecTree() throw();
  std::vector<RecTree>  children;
  int16_t item;

  _RecTree__isset __isset;

  void __set_children(const std::vector<RecTree> & val);

  void __set_item(const int16_t val);

  bool operator == (const RecTree & rhs) const
  {
    if (!(children == rhs.children))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const RecTree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecTree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RecTree& obj);
};

void swap(RecTree &a, RecTree &b);

typedef struct _RecList__isset {
  _RecList__isset() : nextitem(false), item(false) {}
  bool nextitem :1;
  bool item :1;
} _RecList__isset;

class RecList {
 public:

  static const char* ascii_fingerprint; // = "2C300DEAEC3693E06E421D2DDBA10848";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x30,0x0D,0xEA,0xEC,0x36,0x93,0xE0,0x6E,0x42,0x1D,0x2D,0xDB,0xA1,0x08,0x48};

  RecList(const RecList&);
  RecList& operator=(const RecList&);
  RecList() : nextitem(), item(0) {
  }

  virtual ~RecList() throw();
  boost::shared_ptr<RecList> nextitem;
  int16_t item;

  _RecList__isset __isset;

  void __set_nextitem(boost::shared_ptr<RecList> val);

  void __set_item(const int16_t val);

  bool operator == (const RecList & rhs) const
  {
    if (!(nextitem == rhs.nextitem))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const RecList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RecList& obj);
};

void swap(RecList &a, RecList &b);

typedef struct _CoRec__isset {
  _CoRec__isset() : other(false) {}
  bool other :1;
} _CoRec__isset;

class CoRec {
 public:

  static const char* ascii_fingerprint; // = "27D681BDA0E2D176B4BB62F64E580EED";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0xD6,0x81,0xBD,0xA0,0xE2,0xD1,0x76,0xB4,0xBB,0x62,0xF6,0x4E,0x58,0x0E,0xED};

  CoRec(const CoRec&);
  CoRec& operator=(const CoRec&);
  CoRec() : other() {
  }

  virtual ~CoRec() throw();
  boost::shared_ptr<CoRec2> other;

  _CoRec__isset __isset;

  void __set_other(boost::shared_ptr<CoRec2> val);

  bool operator == (const CoRec & rhs) const
  {
    if (!(other == rhs.other))
      return false;
    return true;
  }
  bool operator != (const CoRec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoRec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CoRec& obj);
};

void swap(CoRec &a, CoRec &b);

typedef struct _CoRec2__isset {
  _CoRec2__isset() : other(false) {}
  bool other :1;
} _CoRec2__isset;

class CoRec2 {
 public:

  static const char* ascii_fingerprint; // = "8CB90C9CDBB9AB25310F0555AE39F055";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0xB9,0x0C,0x9C,0xDB,0xB9,0xAB,0x25,0x31,0x0F,0x05,0x55,0xAE,0x39,0xF0,0x55};

  CoRec2(const CoRec2&);
  CoRec2& operator=(const CoRec2&);
  CoRec2() {
  }

  virtual ~CoRec2() throw();
  CoRec other;

  _CoRec2__isset __isset;

  void __set_other(const CoRec& val);

  bool operator == (const CoRec2 & rhs) const
  {
    if (!(other == rhs.other))
      return false;
    return true;
  }
  bool operator != (const CoRec2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoRec2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CoRec2& obj);
};

void swap(CoRec2 &a, CoRec2 &b);

typedef struct _VectorTest__isset {
  _VectorTest__isset() : lister(false) {}
  bool lister :1;
} _VectorTest__isset;

class VectorTest {
 public:

  static const char* ascii_fingerprint; // = "BB7570EB8EE60BA18D42F3F603783966";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x75,0x70,0xEB,0x8E,0xE6,0x0B,0xA1,0x8D,0x42,0xF3,0xF6,0x03,0x78,0x39,0x66};

  VectorTest(const VectorTest&);
  VectorTest& operator=(const VectorTest&);
  VectorTest() {
  }

  virtual ~VectorTest() throw();
  std::vector<RecList>  lister;

  _VectorTest__isset __isset;

  void __set_lister(const std::vector<RecList> & val);

  bool operator == (const VectorTest & rhs) const
  {
    if (!(lister == rhs.lister))
      return false;
    return true;
  }
  bool operator != (const VectorTest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VectorTest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VectorTest& obj);
};

void swap(VectorTest &a, VectorTest &b);



#endif
