/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TestService_H
#define TestService_H

#include <thrift/TDispatchProcessor.h>
#include "Recursive_types.h"



class TestServiceIf {
 public:
  virtual ~TestServiceIf() {}
  virtual void echoTree(RecTree& _return, const RecTree& tree) = 0;
  virtual void echoList(RecList& _return, const RecList& lst) = 0;
  virtual void echoCoRec(CoRec& _return, const CoRec& item) = 0;
};

class TestServiceIfFactory {
 public:
  typedef TestServiceIf Handler;

  virtual ~TestServiceIfFactory() {}

  virtual TestServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TestServiceIf* /* handler */) = 0;
};

class TestServiceIfSingletonFactory : virtual public TestServiceIfFactory {
 public:
  TestServiceIfSingletonFactory(const boost::shared_ptr<TestServiceIf>& iface) : iface_(iface) {}
  virtual ~TestServiceIfSingletonFactory() {}

  virtual TestServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TestServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TestServiceIf> iface_;
};

class TestServiceNull : virtual public TestServiceIf {
 public:
  virtual ~TestServiceNull() {}
  void echoTree(RecTree& /* _return */, const RecTree& /* tree */) {
    return;
  }
  void echoList(RecList& /* _return */, const RecList& /* lst */) {
    return;
  }
  void echoCoRec(CoRec& /* _return */, const CoRec& /* item */) {
    return;
  }
};

typedef struct _TestService_echoTree_args__isset {
  _TestService_echoTree_args__isset() : tree(false) {}
  bool tree :1;
} _TestService_echoTree_args__isset;

class TestService_echoTree_args {
 public:

  static const char* ascii_fingerprint; // = "CA7DB8EE981CF663AEC854DFC540316C";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x7D,0xB8,0xEE,0x98,0x1C,0xF6,0x63,0xAE,0xC8,0x54,0xDF,0xC5,0x40,0x31,0x6C};

  TestService_echoTree_args(const TestService_echoTree_args&);
  TestService_echoTree_args& operator=(const TestService_echoTree_args&);
  TestService_echoTree_args() {
  }

  virtual ~TestService_echoTree_args() throw();
  RecTree tree;

  _TestService_echoTree_args__isset __isset;

  void __set_tree(const RecTree& val);

  bool operator == (const TestService_echoTree_args & rhs) const
  {
    if (!(tree == rhs.tree))
      return false;
    return true;
  }
  bool operator != (const TestService_echoTree_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_echoTree_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoTree_args& obj);
};


class TestService_echoTree_pargs {
 public:

  static const char* ascii_fingerprint; // = "CA7DB8EE981CF663AEC854DFC540316C";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x7D,0xB8,0xEE,0x98,0x1C,0xF6,0x63,0xAE,0xC8,0x54,0xDF,0xC5,0x40,0x31,0x6C};


  virtual ~TestService_echoTree_pargs() throw();
  const RecTree* tree;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoTree_pargs& obj);
};

typedef struct _TestService_echoTree_result__isset {
  _TestService_echoTree_result__isset() : success(false) {}
  bool success :1;
} _TestService_echoTree_result__isset;

class TestService_echoTree_result {
 public:

  static const char* ascii_fingerprint; // = "D456DAFFBAFCA0953B7692D5E26C7481";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x56,0xDA,0xFF,0xBA,0xFC,0xA0,0x95,0x3B,0x76,0x92,0xD5,0xE2,0x6C,0x74,0x81};

  TestService_echoTree_result(const TestService_echoTree_result&);
  TestService_echoTree_result& operator=(const TestService_echoTree_result&);
  TestService_echoTree_result() {
  }

  virtual ~TestService_echoTree_result() throw();
  RecTree success;

  _TestService_echoTree_result__isset __isset;

  void __set_success(const RecTree& val);

  bool operator == (const TestService_echoTree_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TestService_echoTree_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_echoTree_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoTree_result& obj);
};

typedef struct _TestService_echoTree_presult__isset {
  _TestService_echoTree_presult__isset() : success(false) {}
  bool success :1;
} _TestService_echoTree_presult__isset;

class TestService_echoTree_presult {
 public:

  static const char* ascii_fingerprint; // = "D456DAFFBAFCA0953B7692D5E26C7481";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x56,0xDA,0xFF,0xBA,0xFC,0xA0,0x95,0x3B,0x76,0x92,0xD5,0xE2,0x6C,0x74,0x81};


  virtual ~TestService_echoTree_presult() throw();
  RecTree* success;

  _TestService_echoTree_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoTree_presult& obj);
};

typedef struct _TestService_echoList_args__isset {
  _TestService_echoList_args__isset() : lst(false) {}
  bool lst :1;
} _TestService_echoList_args__isset;

class TestService_echoList_args {
 public:

  static const char* ascii_fingerprint; // = "A1626DE4D23AAC2216AB7008A8E92E3E";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x62,0x6D,0xE4,0xD2,0x3A,0xAC,0x22,0x16,0xAB,0x70,0x08,0xA8,0xE9,0x2E,0x3E};

  TestService_echoList_args(const TestService_echoList_args&);
  TestService_echoList_args& operator=(const TestService_echoList_args&);
  TestService_echoList_args() {
  }

  virtual ~TestService_echoList_args() throw();
  RecList lst;

  _TestService_echoList_args__isset __isset;

  void __set_lst(const RecList& val);

  bool operator == (const TestService_echoList_args & rhs) const
  {
    if (!(lst == rhs.lst))
      return false;
    return true;
  }
  bool operator != (const TestService_echoList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_echoList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoList_args& obj);
};


class TestService_echoList_pargs {
 public:

  static const char* ascii_fingerprint; // = "A1626DE4D23AAC2216AB7008A8E92E3E";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x62,0x6D,0xE4,0xD2,0x3A,0xAC,0x22,0x16,0xAB,0x70,0x08,0xA8,0xE9,0x2E,0x3E};


  virtual ~TestService_echoList_pargs() throw();
  const RecList* lst;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoList_pargs& obj);
};

typedef struct _TestService_echoList_result__isset {
  _TestService_echoList_result__isset() : success(false) {}
  bool success :1;
} _TestService_echoList_result__isset;

class TestService_echoList_result {
 public:

  static const char* ascii_fingerprint; // = "CB836910251F52B57A4F542E5C1BFC52";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x83,0x69,0x10,0x25,0x1F,0x52,0xB5,0x7A,0x4F,0x54,0x2E,0x5C,0x1B,0xFC,0x52};

  TestService_echoList_result(const TestService_echoList_result&);
  TestService_echoList_result& operator=(const TestService_echoList_result&);
  TestService_echoList_result() {
  }

  virtual ~TestService_echoList_result() throw();
  RecList success;

  _TestService_echoList_result__isset __isset;

  void __set_success(const RecList& val);

  bool operator == (const TestService_echoList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TestService_echoList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_echoList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoList_result& obj);
};

typedef struct _TestService_echoList_presult__isset {
  _TestService_echoList_presult__isset() : success(false) {}
  bool success :1;
} _TestService_echoList_presult__isset;

class TestService_echoList_presult {
 public:

  static const char* ascii_fingerprint; // = "CB836910251F52B57A4F542E5C1BFC52";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x83,0x69,0x10,0x25,0x1F,0x52,0xB5,0x7A,0x4F,0x54,0x2E,0x5C,0x1B,0xFC,0x52};


  virtual ~TestService_echoList_presult() throw();
  RecList* success;

  _TestService_echoList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoList_presult& obj);
};

typedef struct _TestService_echoCoRec_args__isset {
  _TestService_echoCoRec_args__isset() : item(false) {}
  bool item :1;
} _TestService_echoCoRec_args__isset;

class TestService_echoCoRec_args {
 public:

  static const char* ascii_fingerprint; // = "8CB90C9CDBB9AB25310F0555AE39F055";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0xB9,0x0C,0x9C,0xDB,0xB9,0xAB,0x25,0x31,0x0F,0x05,0x55,0xAE,0x39,0xF0,0x55};

  TestService_echoCoRec_args(const TestService_echoCoRec_args&);
  TestService_echoCoRec_args& operator=(const TestService_echoCoRec_args&);
  TestService_echoCoRec_args() {
  }

  virtual ~TestService_echoCoRec_args() throw();
  CoRec item;

  _TestService_echoCoRec_args__isset __isset;

  void __set_item(const CoRec& val);

  bool operator == (const TestService_echoCoRec_args & rhs) const
  {
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const TestService_echoCoRec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_echoCoRec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoCoRec_args& obj);
};


class TestService_echoCoRec_pargs {
 public:

  static const char* ascii_fingerprint; // = "8CB90C9CDBB9AB25310F0555AE39F055";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0xB9,0x0C,0x9C,0xDB,0xB9,0xAB,0x25,0x31,0x0F,0x05,0x55,0xAE,0x39,0xF0,0x55};


  virtual ~TestService_echoCoRec_pargs() throw();
  const CoRec* item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoCoRec_pargs& obj);
};

typedef struct _TestService_echoCoRec_result__isset {
  _TestService_echoCoRec_result__isset() : success(false) {}
  bool success :1;
} _TestService_echoCoRec_result__isset;

class TestService_echoCoRec_result {
 public:

  static const char* ascii_fingerprint; // = "3CB022FC5412590CE048932006455EE0";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xB0,0x22,0xFC,0x54,0x12,0x59,0x0C,0xE0,0x48,0x93,0x20,0x06,0x45,0x5E,0xE0};

  TestService_echoCoRec_result(const TestService_echoCoRec_result&);
  TestService_echoCoRec_result& operator=(const TestService_echoCoRec_result&);
  TestService_echoCoRec_result() {
  }

  virtual ~TestService_echoCoRec_result() throw();
  CoRec success;

  _TestService_echoCoRec_result__isset __isset;

  void __set_success(const CoRec& val);

  bool operator == (const TestService_echoCoRec_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TestService_echoCoRec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_echoCoRec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoCoRec_result& obj);
};

typedef struct _TestService_echoCoRec_presult__isset {
  _TestService_echoCoRec_presult__isset() : success(false) {}
  bool success :1;
} _TestService_echoCoRec_presult__isset;

class TestService_echoCoRec_presult {
 public:

  static const char* ascii_fingerprint; // = "3CB022FC5412590CE048932006455EE0";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xB0,0x22,0xFC,0x54,0x12,0x59,0x0C,0xE0,0x48,0x93,0x20,0x06,0x45,0x5E,0xE0};


  virtual ~TestService_echoCoRec_presult() throw();
  CoRec* success;

  _TestService_echoCoRec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TestService_echoCoRec_presult& obj);
};

class TestServiceClient : virtual public TestServiceIf {
 public:
  TestServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echoTree(RecTree& _return, const RecTree& tree);
  void send_echoTree(const RecTree& tree);
  void recv_echoTree(RecTree& _return);
  void echoList(RecList& _return, const RecList& lst);
  void send_echoList(const RecList& lst);
  void recv_echoList(RecList& _return);
  void echoCoRec(CoRec& _return, const CoRec& item);
  void send_echoCoRec(const CoRec& item);
  void recv_echoCoRec(CoRec& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TestServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TestServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_echoTree(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoCoRec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TestServiceProcessor(boost::shared_ptr<TestServiceIf> iface) :
    iface_(iface) {
    processMap_["echoTree"] = &TestServiceProcessor::process_echoTree;
    processMap_["echoList"] = &TestServiceProcessor::process_echoList;
    processMap_["echoCoRec"] = &TestServiceProcessor::process_echoCoRec;
  }

  virtual ~TestServiceProcessor() {}
};

class TestServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TestServiceProcessorFactory(const ::boost::shared_ptr< TestServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TestServiceIfFactory > handlerFactory_;
};

class TestServiceMultiface : virtual public TestServiceIf {
 public:
  TestServiceMultiface(std::vector<boost::shared_ptr<TestServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TestServiceIf> > ifaces_;
  TestServiceMultiface() {}
  void add(boost::shared_ptr<TestServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echoTree(RecTree& _return, const RecTree& tree) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoTree(_return, tree);
    }
    ifaces_[i]->echoTree(_return, tree);
    return;
  }

  void echoList(RecList& _return, const RecList& lst) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoList(_return, lst);
    }
    ifaces_[i]->echoList(_return, lst);
    return;
  }

  void echoCoRec(CoRec& _return, const CoRec& item) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoCoRec(_return, item);
    }
    ifaces_[i]->echoCoRec(_return, item);
    return;
  }

};



#endif
