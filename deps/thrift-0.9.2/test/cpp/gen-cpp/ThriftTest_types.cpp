/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftTest_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thrift { namespace test {

int _kNumberzValues[] = {
  Numberz::ONE,
  Numberz::TWO,
  Numberz::THREE,
  Numberz::FIVE,
  Numberz::SIX,
  Numberz::EIGHT
};
const char* _kNumberzNames[] = {
  "ONE",
  "TWO",
  "THREE",
  "FIVE",
  "SIX",
  "EIGHT"
};
const std::map<int, const char*> _Numberz_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kNumberzValues, _kNumberzNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Bonk::~Bonk() throw() {
}


void Bonk::__set_message(const std::string& val) {
  this->message = val;
}

void Bonk::__set_type(const int32_t val) {
  this->type = val;
}

const char* Bonk::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t Bonk::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

void swap(Bonk &a, Bonk &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

Bonk::Bonk(const Bonk& other0) {
  message = other0.message;
  type = other0.type;
  __isset = other0.__isset;
}
Bonk& Bonk::operator=(const Bonk& other1) {
  message = other1.message;
  type = other1.type;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Bonk& obj) {
  using apache::thrift::to_string;
  out << "Bonk(";
  out << "message=" << to_string(obj.message);
  out << ", " << "type=" << to_string(obj.type);
  out << ")";
  return out;
}


Bools::~Bools() throw() {
}


void Bools::__set_im_true(const bool val) {
  this->im_true = val;
}

void Bools::__set_im_false(const bool val) {
  this->im_false = val;
}

const char* Bools::ascii_fingerprint = "403F0C4586060E367DA428DD09C59C9C";
const uint8_t Bools::binary_fingerprint[16] = {0x40,0x3F,0x0C,0x45,0x86,0x06,0x0E,0x36,0x7D,0xA4,0x28,0xDD,0x09,0xC5,0x9C,0x9C};

void swap(Bools &a, Bools &b) {
  using ::std::swap;
  swap(a.im_true, b.im_true);
  swap(a.im_false, b.im_false);
  swap(a.__isset, b.__isset);
}

Bools::Bools(const Bools& other2) {
  im_true = other2.im_true;
  im_false = other2.im_false;
  __isset = other2.__isset;
}
Bools& Bools::operator=(const Bools& other3) {
  im_true = other3.im_true;
  im_false = other3.im_false;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Bools& obj) {
  using apache::thrift::to_string;
  out << "Bools(";
  out << "im_true=" << to_string(obj.im_true);
  out << ", " << "im_false=" << to_string(obj.im_false);
  out << ")";
  return out;
}


Xtruct::~Xtruct() throw() {
}


void Xtruct::__set_string_thing(const std::string& val) {
  this->string_thing = val;
}

void Xtruct::__set_byte_thing(const int8_t val) {
  this->byte_thing = val;
}

void Xtruct::__set_i32_thing(const int32_t val) {
  this->i32_thing = val;
}

void Xtruct::__set_i64_thing(const int64_t val) {
  this->i64_thing = val;
}

const char* Xtruct::ascii_fingerprint = "01AAAA2258347790947AE6F75EE27B67";
const uint8_t Xtruct::binary_fingerprint[16] = {0x01,0xAA,0xAA,0x22,0x58,0x34,0x77,0x90,0x94,0x7A,0xE6,0xF7,0x5E,0xE2,0x7B,0x67};

void swap(Xtruct &a, Xtruct &b) {
  using ::std::swap;
  swap(a.string_thing, b.string_thing);
  swap(a.byte_thing, b.byte_thing);
  swap(a.i32_thing, b.i32_thing);
  swap(a.i64_thing, b.i64_thing);
  swap(a.__isset, b.__isset);
}

Xtruct::Xtruct(const Xtruct& other4) {
  string_thing = other4.string_thing;
  byte_thing = other4.byte_thing;
  i32_thing = other4.i32_thing;
  i64_thing = other4.i64_thing;
  __isset = other4.__isset;
}
Xtruct& Xtruct::operator=(const Xtruct& other5) {
  string_thing = other5.string_thing;
  byte_thing = other5.byte_thing;
  i32_thing = other5.i32_thing;
  i64_thing = other5.i64_thing;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Xtruct& obj) {
  using apache::thrift::to_string;
  out << "Xtruct(";
  out << "string_thing=" << to_string(obj.string_thing);
  out << ", " << "byte_thing=" << to_string(obj.byte_thing);
  out << ", " << "i32_thing=" << to_string(obj.i32_thing);
  out << ", " << "i64_thing=" << to_string(obj.i64_thing);
  out << ")";
  return out;
}


Xtruct2::~Xtruct2() throw() {
}


void Xtruct2::__set_byte_thing(const int8_t val) {
  this->byte_thing = val;
}

void Xtruct2::__set_struct_thing(const Xtruct& val) {
  this->struct_thing = val;
}

void Xtruct2::__set_i32_thing(const int32_t val) {
  this->i32_thing = val;
}

const char* Xtruct2::ascii_fingerprint = "0FA9E7DB20337B1935DECB146BE27561";
const uint8_t Xtruct2::binary_fingerprint[16] = {0x0F,0xA9,0xE7,0xDB,0x20,0x33,0x7B,0x19,0x35,0xDE,0xCB,0x14,0x6B,0xE2,0x75,0x61};

void swap(Xtruct2 &a, Xtruct2 &b) {
  using ::std::swap;
  swap(a.byte_thing, b.byte_thing);
  swap(a.struct_thing, b.struct_thing);
  swap(a.i32_thing, b.i32_thing);
  swap(a.__isset, b.__isset);
}

Xtruct2::Xtruct2(const Xtruct2& other6) {
  byte_thing = other6.byte_thing;
  struct_thing = other6.struct_thing;
  i32_thing = other6.i32_thing;
  __isset = other6.__isset;
}
Xtruct2& Xtruct2::operator=(const Xtruct2& other7) {
  byte_thing = other7.byte_thing;
  struct_thing = other7.struct_thing;
  i32_thing = other7.i32_thing;
  __isset = other7.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Xtruct2& obj) {
  using apache::thrift::to_string;
  out << "Xtruct2(";
  out << "byte_thing=" << to_string(obj.byte_thing);
  out << ", " << "struct_thing=" << to_string(obj.struct_thing);
  out << ", " << "i32_thing=" << to_string(obj.i32_thing);
  out << ")";
  return out;
}


Xtruct3::~Xtruct3() throw() {
}


void Xtruct3::__set_string_thing(const std::string& val) {
  this->string_thing = val;
}

void Xtruct3::__set_changed(const int32_t val) {
  this->changed = val;
}

void Xtruct3::__set_i32_thing(const int32_t val) {
  this->i32_thing = val;
}

void Xtruct3::__set_i64_thing(const int64_t val) {
  this->i64_thing = val;
}

const char* Xtruct3::ascii_fingerprint = "7E14E617C7C8E24EC18FE35116D3ECC0";
const uint8_t Xtruct3::binary_fingerprint[16] = {0x7E,0x14,0xE6,0x17,0xC7,0xC8,0xE2,0x4E,0xC1,0x8F,0xE3,0x51,0x16,0xD3,0xEC,0xC0};

void swap(Xtruct3 &a, Xtruct3 &b) {
  using ::std::swap;
  swap(a.string_thing, b.string_thing);
  swap(a.changed, b.changed);
  swap(a.i32_thing, b.i32_thing);
  swap(a.i64_thing, b.i64_thing);
  swap(a.__isset, b.__isset);
}

Xtruct3::Xtruct3(const Xtruct3& other8) {
  string_thing = other8.string_thing;
  changed = other8.changed;
  i32_thing = other8.i32_thing;
  i64_thing = other8.i64_thing;
  __isset = other8.__isset;
}
Xtruct3& Xtruct3::operator=(const Xtruct3& other9) {
  string_thing = other9.string_thing;
  changed = other9.changed;
  i32_thing = other9.i32_thing;
  i64_thing = other9.i64_thing;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Xtruct3& obj) {
  using apache::thrift::to_string;
  out << "Xtruct3(";
  out << "string_thing=" << to_string(obj.string_thing);
  out << ", " << "changed=" << to_string(obj.changed);
  out << ", " << "i32_thing=" << to_string(obj.i32_thing);
  out << ", " << "i64_thing=" << to_string(obj.i64_thing);
  out << ")";
  return out;
}


Insanity::~Insanity() throw() {
}


void Insanity::__set_userMap(const std::map<Numberz::type, UserId> & val) {
  this->userMap = val;
}

void Insanity::__set_xtructs(const std::vector<Xtruct> & val) {
  this->xtructs = val;
}

const char* Insanity::ascii_fingerprint = "9E7D0680FA87F83E5A0CEF688569EFE3";
const uint8_t Insanity::binary_fingerprint[16] = {0x9E,0x7D,0x06,0x80,0xFA,0x87,0xF8,0x3E,0x5A,0x0C,0xEF,0x68,0x85,0x69,0xEF,0xE3};

void swap(Insanity &a, Insanity &b) {
  using ::std::swap;
  swap(a.userMap, b.userMap);
  swap(a.xtructs, b.xtructs);
  swap(a.__isset, b.__isset);
}

Insanity::Insanity(const Insanity& other25) {
  userMap = other25.userMap;
  xtructs = other25.xtructs;
  __isset = other25.__isset;
}
Insanity& Insanity::operator=(const Insanity& other26) {
  userMap = other26.userMap;
  xtructs = other26.xtructs;
  __isset = other26.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Insanity& obj) {
  using apache::thrift::to_string;
  out << "Insanity(";
  out << "userMap=" << to_string(obj.userMap);
  out << ", " << "xtructs=" << to_string(obj.xtructs);
  out << ")";
  return out;
}


CrazyNesting::~CrazyNesting() throw() {
}


void CrazyNesting::__set_string_field(const std::string& val) {
  this->string_field = val;
}

void CrazyNesting::__set_set_field(const std::set<Insanity> & val) {
  this->set_field = val;
__isset.set_field = true;
}

void CrazyNesting::__set_list_field(const std::vector<std::map<std::set<int32_t> , std::map<int32_t, std::set<std::vector<std::map<Insanity, std::string> > > > > > & val) {
  this->list_field = val;
}

void CrazyNesting::__set_binary_field(const std::string& val) {
  this->binary_field = val;
}

const char* CrazyNesting::ascii_fingerprint = "65E05391C27EACE759294E3E55DAC83F";
const uint8_t CrazyNesting::binary_fingerprint[16] = {0x65,0xE0,0x53,0x91,0xC2,0x7E,0xAC,0xE7,0x59,0x29,0x4E,0x3E,0x55,0xDA,0xC8,0x3F};

void swap(CrazyNesting &a, CrazyNesting &b) {
  using ::std::swap;
  swap(a.string_field, b.string_field);
  swap(a.set_field, b.set_field);
  swap(a.list_field, b.list_field);
  swap(a.binary_field, b.binary_field);
  swap(a.__isset, b.__isset);
}

CrazyNesting::CrazyNesting(const CrazyNesting& other84) {
  string_field = other84.string_field;
  set_field = other84.set_field;
  list_field = other84.list_field;
  binary_field = other84.binary_field;
  __isset = other84.__isset;
}
CrazyNesting& CrazyNesting::operator=(const CrazyNesting& other85) {
  string_field = other85.string_field;
  set_field = other85.set_field;
  list_field = other85.list_field;
  binary_field = other85.binary_field;
  __isset = other85.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CrazyNesting& obj) {
  using apache::thrift::to_string;
  out << "CrazyNesting(";
  out << "string_field=" << to_string(obj.string_field);
  out << ", " << "set_field="; (obj.__isset.set_field ? (out << to_string(obj.set_field)) : (out << "<null>"));
  out << ", " << "list_field=" << to_string(obj.list_field);
  out << ", " << "binary_field=" << to_string(obj.binary_field);
  out << ")";
  return out;
}


Xception::~Xception() throw() {
}


void Xception::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void Xception::__set_message(const std::string& val) {
  this->message = val;
}

const char* Xception::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Xception::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

void swap(Xception &a, Xception &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

Xception::Xception(const Xception& other86) : TException() {
  errorCode = other86.errorCode;
  message = other86.message;
  __isset = other86.__isset;
}
Xception& Xception::operator=(const Xception& other87) {
  errorCode = other87.errorCode;
  message = other87.message;
  __isset = other87.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Xception& obj) {
  using apache::thrift::to_string;
  out << "Xception(";
  out << "errorCode=" << to_string(obj.errorCode);
  out << ", " << "message=" << to_string(obj.message);
  out << ")";
  return out;
}


Xception2::~Xception2() throw() {
}


void Xception2::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void Xception2::__set_struct_thing(const Xtruct& val) {
  this->struct_thing = val;
}

const char* Xception2::ascii_fingerprint = "7B1B1DBEB6FD136E8478F45D0399F3C4";
const uint8_t Xception2::binary_fingerprint[16] = {0x7B,0x1B,0x1D,0xBE,0xB6,0xFD,0x13,0x6E,0x84,0x78,0xF4,0x5D,0x03,0x99,0xF3,0xC4};

void swap(Xception2 &a, Xception2 &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.struct_thing, b.struct_thing);
  swap(a.__isset, b.__isset);
}

Xception2::Xception2(const Xception2& other88) : TException() {
  errorCode = other88.errorCode;
  struct_thing = other88.struct_thing;
  __isset = other88.__isset;
}
Xception2& Xception2::operator=(const Xception2& other89) {
  errorCode = other89.errorCode;
  struct_thing = other89.struct_thing;
  __isset = other89.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Xception2& obj) {
  using apache::thrift::to_string;
  out << "Xception2(";
  out << "errorCode=" << to_string(obj.errorCode);
  out << ", " << "struct_thing=" << to_string(obj.struct_thing);
  out << ")";
  return out;
}


EmptyStruct::~EmptyStruct() throw() {
}


const char* EmptyStruct::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t EmptyStruct::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

void swap(EmptyStruct &a, EmptyStruct &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

EmptyStruct::EmptyStruct(const EmptyStruct& other90) {
  (void) other90;
}
EmptyStruct& EmptyStruct::operator=(const EmptyStruct& other91) {
  (void) other91;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const EmptyStruct& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "EmptyStruct(";
  out << ")";
  return out;
}


OneField::~OneField() throw() {
}


void OneField::__set_field(const EmptyStruct& val) {
  this->field = val;
}

const char* OneField::ascii_fingerprint = "2C32A565725135A023CB591D1A993CFD";
const uint8_t OneField::binary_fingerprint[16] = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

void swap(OneField &a, OneField &b) {
  using ::std::swap;
  swap(a.field, b.field);
  swap(a.__isset, b.__isset);
}

OneField::OneField(const OneField& other92) {
  field = other92.field;
  __isset = other92.__isset;
}
OneField& OneField::operator=(const OneField& other93) {
  field = other93.field;
  __isset = other93.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const OneField& obj) {
  using apache::thrift::to_string;
  out << "OneField(";
  out << "field=" << to_string(obj.field);
  out << ")";
  return out;
}


VersioningTestV1::~VersioningTestV1() throw() {
}


void VersioningTestV1::__set_begin_in_both(const int32_t val) {
  this->begin_in_both = val;
}

void VersioningTestV1::__set_old_string(const std::string& val) {
  this->old_string = val;
}

void VersioningTestV1::__set_end_in_both(const int32_t val) {
  this->end_in_both = val;
}

const char* VersioningTestV1::ascii_fingerprint = "CB65C216C3190178AD7ADECF1928CD97";
const uint8_t VersioningTestV1::binary_fingerprint[16] = {0xCB,0x65,0xC2,0x16,0xC3,0x19,0x01,0x78,0xAD,0x7A,0xDE,0xCF,0x19,0x28,0xCD,0x97};

void swap(VersioningTestV1 &a, VersioningTestV1 &b) {
  using ::std::swap;
  swap(a.begin_in_both, b.begin_in_both);
  swap(a.old_string, b.old_string);
  swap(a.end_in_both, b.end_in_both);
  swap(a.__isset, b.__isset);
}

VersioningTestV1::VersioningTestV1(const VersioningTestV1& other94) {
  begin_in_both = other94.begin_in_both;
  old_string = other94.old_string;
  end_in_both = other94.end_in_both;
  __isset = other94.__isset;
}
VersioningTestV1& VersioningTestV1::operator=(const VersioningTestV1& other95) {
  begin_in_both = other95.begin_in_both;
  old_string = other95.old_string;
  end_in_both = other95.end_in_both;
  __isset = other95.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VersioningTestV1& obj) {
  using apache::thrift::to_string;
  out << "VersioningTestV1(";
  out << "begin_in_both=" << to_string(obj.begin_in_both);
  out << ", " << "old_string=" << to_string(obj.old_string);
  out << ", " << "end_in_both=" << to_string(obj.end_in_both);
  out << ")";
  return out;
}


VersioningTestV2::~VersioningTestV2() throw() {
}


void VersioningTestV2::__set_begin_in_both(const int32_t val) {
  this->begin_in_both = val;
}

void VersioningTestV2::__set_newint(const int32_t val) {
  this->newint = val;
}

void VersioningTestV2::__set_newbyte(const int8_t val) {
  this->newbyte = val;
}

void VersioningTestV2::__set_newshort(const int16_t val) {
  this->newshort = val;
}

void VersioningTestV2::__set_newlong(const int64_t val) {
  this->newlong = val;
}

void VersioningTestV2::__set_newdouble(const double val) {
  this->newdouble = val;
}

void VersioningTestV2::__set_newstruct(const Bonk& val) {
  this->newstruct = val;
}

void VersioningTestV2::__set_newlist(const std::vector<int32_t> & val) {
  this->newlist = val;
}

void VersioningTestV2::__set_newset(const std::set<int32_t> & val) {
  this->newset = val;
}

void VersioningTestV2::__set_newmap(const std::map<int32_t, int32_t> & val) {
  this->newmap = val;
}

void VersioningTestV2::__set_newstring(const std::string& val) {
  this->newstring = val;
}

void VersioningTestV2::__set_end_in_both(const int32_t val) {
  this->end_in_both = val;
}

const char* VersioningTestV2::ascii_fingerprint = "085522DA9EF6E13EF3186B0B4C19DDDB";
const uint8_t VersioningTestV2::binary_fingerprint[16] = {0x08,0x55,0x22,0xDA,0x9E,0xF6,0xE1,0x3E,0xF3,0x18,0x6B,0x0B,0x4C,0x19,0xDD,0xDB};

void swap(VersioningTestV2 &a, VersioningTestV2 &b) {
  using ::std::swap;
  swap(a.begin_in_both, b.begin_in_both);
  swap(a.newint, b.newint);
  swap(a.newbyte, b.newbyte);
  swap(a.newshort, b.newshort);
  swap(a.newlong, b.newlong);
  swap(a.newdouble, b.newdouble);
  swap(a.newstruct, b.newstruct);
  swap(a.newlist, b.newlist);
  swap(a.newset, b.newset);
  swap(a.newmap, b.newmap);
  swap(a.newstring, b.newstring);
  swap(a.end_in_both, b.end_in_both);
  swap(a.__isset, b.__isset);
}

VersioningTestV2::VersioningTestV2(const VersioningTestV2& other117) {
  begin_in_both = other117.begin_in_both;
  newint = other117.newint;
  newbyte = other117.newbyte;
  newshort = other117.newshort;
  newlong = other117.newlong;
  newdouble = other117.newdouble;
  newstruct = other117.newstruct;
  newlist = other117.newlist;
  newset = other117.newset;
  newmap = other117.newmap;
  newstring = other117.newstring;
  end_in_both = other117.end_in_both;
  __isset = other117.__isset;
}
VersioningTestV2& VersioningTestV2::operator=(const VersioningTestV2& other118) {
  begin_in_both = other118.begin_in_both;
  newint = other118.newint;
  newbyte = other118.newbyte;
  newshort = other118.newshort;
  newlong = other118.newlong;
  newdouble = other118.newdouble;
  newstruct = other118.newstruct;
  newlist = other118.newlist;
  newset = other118.newset;
  newmap = other118.newmap;
  newstring = other118.newstring;
  end_in_both = other118.end_in_both;
  __isset = other118.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VersioningTestV2& obj) {
  using apache::thrift::to_string;
  out << "VersioningTestV2(";
  out << "begin_in_both=" << to_string(obj.begin_in_both);
  out << ", " << "newint=" << to_string(obj.newint);
  out << ", " << "newbyte=" << to_string(obj.newbyte);
  out << ", " << "newshort=" << to_string(obj.newshort);
  out << ", " << "newlong=" << to_string(obj.newlong);
  out << ", " << "newdouble=" << to_string(obj.newdouble);
  out << ", " << "newstruct=" << to_string(obj.newstruct);
  out << ", " << "newlist=" << to_string(obj.newlist);
  out << ", " << "newset=" << to_string(obj.newset);
  out << ", " << "newmap=" << to_string(obj.newmap);
  out << ", " << "newstring=" << to_string(obj.newstring);
  out << ", " << "end_in_both=" << to_string(obj.end_in_both);
  out << ")";
  return out;
}


ListTypeVersioningV1::~ListTypeVersioningV1() throw() {
}


void ListTypeVersioningV1::__set_myints(const std::vector<int32_t> & val) {
  this->myints = val;
}

void ListTypeVersioningV1::__set_hello(const std::string& val) {
  this->hello = val;
}

const char* ListTypeVersioningV1::ascii_fingerprint = "CCCCE89C7E9DA10280F5663700677313";
const uint8_t ListTypeVersioningV1::binary_fingerprint[16] = {0xCC,0xCC,0xE8,0x9C,0x7E,0x9D,0xA1,0x02,0x80,0xF5,0x66,0x37,0x00,0x67,0x73,0x13};

void swap(ListTypeVersioningV1 &a, ListTypeVersioningV1 &b) {
  using ::std::swap;
  swap(a.myints, b.myints);
  swap(a.hello, b.hello);
  swap(a.__isset, b.__isset);
}

ListTypeVersioningV1::ListTypeVersioningV1(const ListTypeVersioningV1& other125) {
  myints = other125.myints;
  hello = other125.hello;
  __isset = other125.__isset;
}
ListTypeVersioningV1& ListTypeVersioningV1::operator=(const ListTypeVersioningV1& other126) {
  myints = other126.myints;
  hello = other126.hello;
  __isset = other126.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListTypeVersioningV1& obj) {
  using apache::thrift::to_string;
  out << "ListTypeVersioningV1(";
  out << "myints=" << to_string(obj.myints);
  out << ", " << "hello=" << to_string(obj.hello);
  out << ")";
  return out;
}


ListTypeVersioningV2::~ListTypeVersioningV2() throw() {
}


void ListTypeVersioningV2::__set_strings(const std::vector<std::string> & val) {
  this->strings = val;
}

void ListTypeVersioningV2::__set_hello(const std::string& val) {
  this->hello = val;
}

const char* ListTypeVersioningV2::ascii_fingerprint = "BE556BF7091B2DABBA1863D5E458B15F";
const uint8_t ListTypeVersioningV2::binary_fingerprint[16] = {0xBE,0x55,0x6B,0xF7,0x09,0x1B,0x2D,0xAB,0xBA,0x18,0x63,0xD5,0xE4,0x58,0xB1,0x5F};

void swap(ListTypeVersioningV2 &a, ListTypeVersioningV2 &b) {
  using ::std::swap;
  swap(a.strings, b.strings);
  swap(a.hello, b.hello);
  swap(a.__isset, b.__isset);
}

ListTypeVersioningV2::ListTypeVersioningV2(const ListTypeVersioningV2& other133) {
  strings = other133.strings;
  hello = other133.hello;
  __isset = other133.__isset;
}
ListTypeVersioningV2& ListTypeVersioningV2::operator=(const ListTypeVersioningV2& other134) {
  strings = other134.strings;
  hello = other134.hello;
  __isset = other134.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListTypeVersioningV2& obj) {
  using apache::thrift::to_string;
  out << "ListTypeVersioningV2(";
  out << "strings=" << to_string(obj.strings);
  out << ", " << "hello=" << to_string(obj.hello);
  out << ")";
  return out;
}


GuessProtocolStruct::~GuessProtocolStruct() throw() {
}


void GuessProtocolStruct::__set_map_field(const std::map<std::string, std::string> & val) {
  this->map_field = val;
}

const char* GuessProtocolStruct::ascii_fingerprint = "C98BFEEE61EF706362155747298111DA";
const uint8_t GuessProtocolStruct::binary_fingerprint[16] = {0xC9,0x8B,0xFE,0xEE,0x61,0xEF,0x70,0x63,0x62,0x15,0x57,0x47,0x29,0x81,0x11,0xDA};

void swap(GuessProtocolStruct &a, GuessProtocolStruct &b) {
  using ::std::swap;
  swap(a.map_field, b.map_field);
  swap(a.__isset, b.__isset);
}

GuessProtocolStruct::GuessProtocolStruct(const GuessProtocolStruct& other143) {
  map_field = other143.map_field;
  __isset = other143.__isset;
}
GuessProtocolStruct& GuessProtocolStruct::operator=(const GuessProtocolStruct& other144) {
  map_field = other144.map_field;
  __isset = other144.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GuessProtocolStruct& obj) {
  using apache::thrift::to_string;
  out << "GuessProtocolStruct(";
  out << "map_field=" << to_string(obj.map_field);
  out << ")";
  return out;
}


LargeDeltas::~LargeDeltas() throw() {
}


void LargeDeltas::__set_b1(const Bools& val) {
  this->b1 = val;
}

void LargeDeltas::__set_b10(const Bools& val) {
  this->b10 = val;
}

void LargeDeltas::__set_b100(const Bools& val) {
  this->b100 = val;
}

void LargeDeltas::__set_check_true(const bool val) {
  this->check_true = val;
}

void LargeDeltas::__set_b1000(const Bools& val) {
  this->b1000 = val;
}

void LargeDeltas::__set_check_false(const bool val) {
  this->check_false = val;
}

void LargeDeltas::__set_vertwo2000(const VersioningTestV2& val) {
  this->vertwo2000 = val;
}

void LargeDeltas::__set_a_set2500(const std::set<std::string> & val) {
  this->a_set2500 = val;
}

void LargeDeltas::__set_vertwo3000(const VersioningTestV2& val) {
  this->vertwo3000 = val;
}

void LargeDeltas::__set_big_numbers(const std::vector<int32_t> & val) {
  this->big_numbers = val;
}

const char* LargeDeltas::ascii_fingerprint = "9DD556A67D1276F4D9389D7B3A153019";
const uint8_t LargeDeltas::binary_fingerprint[16] = {0x9D,0xD5,0x56,0xA6,0x7D,0x12,0x76,0xF4,0xD9,0x38,0x9D,0x7B,0x3A,0x15,0x30,0x19};

void swap(LargeDeltas &a, LargeDeltas &b) {
  using ::std::swap;
  swap(a.b1, b.b1);
  swap(a.b10, b.b10);
  swap(a.b100, b.b100);
  swap(a.check_true, b.check_true);
  swap(a.b1000, b.b1000);
  swap(a.check_false, b.check_false);
  swap(a.vertwo2000, b.vertwo2000);
  swap(a.a_set2500, b.a_set2500);
  swap(a.vertwo3000, b.vertwo3000);
  swap(a.big_numbers, b.big_numbers);
  swap(a.__isset, b.__isset);
}

LargeDeltas::LargeDeltas(const LargeDeltas& other158) {
  b1 = other158.b1;
  b10 = other158.b10;
  b100 = other158.b100;
  check_true = other158.check_true;
  b1000 = other158.b1000;
  check_false = other158.check_false;
  vertwo2000 = other158.vertwo2000;
  a_set2500 = other158.a_set2500;
  vertwo3000 = other158.vertwo3000;
  big_numbers = other158.big_numbers;
  __isset = other158.__isset;
}
LargeDeltas& LargeDeltas::operator=(const LargeDeltas& other159) {
  b1 = other159.b1;
  b10 = other159.b10;
  b100 = other159.b100;
  check_true = other159.check_true;
  b1000 = other159.b1000;
  check_false = other159.check_false;
  vertwo2000 = other159.vertwo2000;
  a_set2500 = other159.a_set2500;
  vertwo3000 = other159.vertwo3000;
  big_numbers = other159.big_numbers;
  __isset = other159.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const LargeDeltas& obj) {
  using apache::thrift::to_string;
  out << "LargeDeltas(";
  out << "b1=" << to_string(obj.b1);
  out << ", " << "b10=" << to_string(obj.b10);
  out << ", " << "b100=" << to_string(obj.b100);
  out << ", " << "check_true=" << to_string(obj.check_true);
  out << ", " << "b1000=" << to_string(obj.b1000);
  out << ", " << "check_false=" << to_string(obj.check_false);
  out << ", " << "vertwo2000=" << to_string(obj.vertwo2000);
  out << ", " << "a_set2500=" << to_string(obj.a_set2500);
  out << ", " << "vertwo3000=" << to_string(obj.vertwo3000);
  out << ", " << "big_numbers=" << to_string(obj.big_numbers);
  out << ")";
  return out;
}


NestedListsI32x2::~NestedListsI32x2() throw() {
}


void NestedListsI32x2::__set_integerlist(const std::vector<std::vector<int32_t> > & val) {
  this->integerlist = val;
}

const char* NestedListsI32x2::ascii_fingerprint = "156D870DAD538FB7DA6861EB02437141";
const uint8_t NestedListsI32x2::binary_fingerprint[16] = {0x15,0x6D,0x87,0x0D,0xAD,0x53,0x8F,0xB7,0xDA,0x68,0x61,0xEB,0x02,0x43,0x71,0x41};

void swap(NestedListsI32x2 &a, NestedListsI32x2 &b) {
  using ::std::swap;
  swap(a.integerlist, b.integerlist);
  swap(a.__isset, b.__isset);
}

NestedListsI32x2::NestedListsI32x2(const NestedListsI32x2& other172) {
  integerlist = other172.integerlist;
  __isset = other172.__isset;
}
NestedListsI32x2& NestedListsI32x2::operator=(const NestedListsI32x2& other173) {
  integerlist = other173.integerlist;
  __isset = other173.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NestedListsI32x2& obj) {
  using apache::thrift::to_string;
  out << "NestedListsI32x2(";
  out << "integerlist=" << to_string(obj.integerlist);
  out << ")";
  return out;
}


NestedListsI32x3::~NestedListsI32x3() throw() {
}


void NestedListsI32x3::__set_integerlist(const std::vector<std::vector<std::vector<int32_t> > > & val) {
  this->integerlist = val;
}

const char* NestedListsI32x3::ascii_fingerprint = "481969D8BBB43CDDEBFA0800E2E55AE1";
const uint8_t NestedListsI32x3::binary_fingerprint[16] = {0x48,0x19,0x69,0xD8,0xBB,0xB4,0x3C,0xDD,0xEB,0xFA,0x08,0x00,0xE2,0xE5,0x5A,0xE1};

void swap(NestedListsI32x3 &a, NestedListsI32x3 &b) {
  using ::std::swap;
  swap(a.integerlist, b.integerlist);
  swap(a.__isset, b.__isset);
}

NestedListsI32x3::NestedListsI32x3(const NestedListsI32x3& other192) {
  integerlist = other192.integerlist;
  __isset = other192.__isset;
}
NestedListsI32x3& NestedListsI32x3::operator=(const NestedListsI32x3& other193) {
  integerlist = other193.integerlist;
  __isset = other193.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NestedListsI32x3& obj) {
  using apache::thrift::to_string;
  out << "NestedListsI32x3(";
  out << "integerlist=" << to_string(obj.integerlist);
  out << ")";
  return out;
}


NestedMixedx2::~NestedMixedx2() throw() {
}


void NestedMixedx2::__set_int_set_list(const std::vector<std::set<int32_t> > & val) {
  this->int_set_list = val;
}

void NestedMixedx2::__set_map_int_strset(const std::map<int32_t, std::set<std::string> > & val) {
  this->map_int_strset = val;
}

void NestedMixedx2::__set_map_int_strset_list(const std::vector<std::map<int32_t, std::set<std::string> > > & val) {
  this->map_int_strset_list = val;
}

const char* NestedMixedx2::ascii_fingerprint = "ECA6228385A178DDEEF2D6F371457DCB";
const uint8_t NestedMixedx2::binary_fingerprint[16] = {0xEC,0xA6,0x22,0x83,0x85,0xA1,0x78,0xDD,0xEE,0xF2,0xD6,0xF3,0x71,0x45,0x7D,0xCB};

void swap(NestedMixedx2 &a, NestedMixedx2 &b) {
  using ::std::swap;
  swap(a.int_set_list, b.int_set_list);
  swap(a.map_int_strset, b.map_int_strset);
  swap(a.map_int_strset_list, b.map_int_strset_list);
  swap(a.__isset, b.__isset);
}

NestedMixedx2::NestedMixedx2(const NestedMixedx2& other243) {
  int_set_list = other243.int_set_list;
  map_int_strset = other243.map_int_strset;
  map_int_strset_list = other243.map_int_strset_list;
  __isset = other243.__isset;
}
NestedMixedx2& NestedMixedx2::operator=(const NestedMixedx2& other244) {
  int_set_list = other244.int_set_list;
  map_int_strset = other244.map_int_strset;
  map_int_strset_list = other244.map_int_strset_list;
  __isset = other244.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NestedMixedx2& obj) {
  using apache::thrift::to_string;
  out << "NestedMixedx2(";
  out << "int_set_list=" << to_string(obj.int_set_list);
  out << ", " << "map_int_strset=" << to_string(obj.map_int_strset);
  out << ", " << "map_int_strset_list=" << to_string(obj.map_int_strset_list);
  out << ")";
  return out;
}


ListBonks::~ListBonks() throw() {
}


void ListBonks::__set_bonk(const std::vector<Bonk> & val) {
  this->bonk = val;
}

const char* ListBonks::ascii_fingerprint = "3967FCB1D2A588AFFB6B3D0713F6F380";
const uint8_t ListBonks::binary_fingerprint[16] = {0x39,0x67,0xFC,0xB1,0xD2,0xA5,0x88,0xAF,0xFB,0x6B,0x3D,0x07,0x13,0xF6,0xF3,0x80};

void swap(ListBonks &a, ListBonks &b) {
  using ::std::swap;
  swap(a.bonk, b.bonk);
  swap(a.__isset, b.__isset);
}

ListBonks::ListBonks(const ListBonks& other251) {
  bonk = other251.bonk;
  __isset = other251.__isset;
}
ListBonks& ListBonks::operator=(const ListBonks& other252) {
  bonk = other252.bonk;
  __isset = other252.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListBonks& obj) {
  using apache::thrift::to_string;
  out << "ListBonks(";
  out << "bonk=" << to_string(obj.bonk);
  out << ")";
  return out;
}


NestedListsBonk::~NestedListsBonk() throw() {
}


void NestedListsBonk::__set_bonk(const std::vector<std::vector<std::vector<Bonk> > > & val) {
  this->bonk = val;
}

const char* NestedListsBonk::ascii_fingerprint = "76F53151491F21E430B14A64523C2C02";
const uint8_t NestedListsBonk::binary_fingerprint[16] = {0x76,0xF5,0x31,0x51,0x49,0x1F,0x21,0xE4,0x30,0xB1,0x4A,0x64,0x52,0x3C,0x2C,0x02};

void swap(NestedListsBonk &a, NestedListsBonk &b) {
  using ::std::swap;
  swap(a.bonk, b.bonk);
  swap(a.__isset, b.__isset);
}

NestedListsBonk::NestedListsBonk(const NestedListsBonk& other271) {
  bonk = other271.bonk;
  __isset = other271.__isset;
}
NestedListsBonk& NestedListsBonk::operator=(const NestedListsBonk& other272) {
  bonk = other272.bonk;
  __isset = other272.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NestedListsBonk& obj) {
  using apache::thrift::to_string;
  out << "NestedListsBonk(";
  out << "bonk=" << to_string(obj.bonk);
  out << ")";
  return out;
}


BoolTest::~BoolTest() throw() {
}


void BoolTest::__set_b(const bool val) {
  this->b = val;
__isset.b = true;
}

void BoolTest::__set_s(const std::string& val) {
  this->s = val;
__isset.s = true;
}

const char* BoolTest::ascii_fingerprint = "B351CA31A26035AB346169C6EFECD393";
const uint8_t BoolTest::binary_fingerprint[16] = {0xB3,0x51,0xCA,0x31,0xA2,0x60,0x35,0xAB,0x34,0x61,0x69,0xC6,0xEF,0xEC,0xD3,0x93};

void swap(BoolTest &a, BoolTest &b) {
  using ::std::swap;
  swap(a.b, b.b);
  swap(a.s, b.s);
  swap(a.__isset, b.__isset);
}

BoolTest::BoolTest(const BoolTest& other273) {
  b = other273.b;
  s = other273.s;
  __isset = other273.__isset;
}
BoolTest& BoolTest::operator=(const BoolTest& other274) {
  b = other274.b;
  s = other274.s;
  __isset = other274.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BoolTest& obj) {
  using apache::thrift::to_string;
  out << "BoolTest(";
  out << "b="; (obj.__isset.b ? (out << to_string(obj.b)) : (out << "<null>"));
  out << ", " << "s="; (obj.__isset.s ? (out << to_string(obj.s)) : (out << "<null>"));
  out << ")";
  return out;
}


StructA::~StructA() throw() {
}


void StructA::__set_s(const std::string& val) {
  this->s = val;
}

const char* StructA::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t StructA::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

void swap(StructA &a, StructA &b) {
  using ::std::swap;
  swap(a.s, b.s);
}

StructA::StructA(const StructA& other275) {
  s = other275.s;
}
StructA& StructA::operator=(const StructA& other276) {
  s = other276.s;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StructA& obj) {
  using apache::thrift::to_string;
  out << "StructA(";
  out << "s=" << to_string(obj.s);
  out << ")";
  return out;
}


StructB::~StructB() throw() {
}


void StructB::__set_aa(const StructA& val) {
  this->aa = val;
__isset.aa = true;
}

void StructB::__set_ab(const StructA& val) {
  this->ab = val;
}

const char* StructB::ascii_fingerprint = "BA933917D4A6040C47632233A8E4974A";
const uint8_t StructB::binary_fingerprint[16] = {0xBA,0x93,0x39,0x17,0xD4,0xA6,0x04,0x0C,0x47,0x63,0x22,0x33,0xA8,0xE4,0x97,0x4A};

void swap(StructB &a, StructB &b) {
  using ::std::swap;
  swap(a.aa, b.aa);
  swap(a.ab, b.ab);
  swap(a.__isset, b.__isset);
}

StructB::StructB(const StructB& other277) {
  aa = other277.aa;
  ab = other277.ab;
  __isset = other277.__isset;
}
StructB& StructB::operator=(const StructB& other278) {
  aa = other278.aa;
  ab = other278.ab;
  __isset = other278.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StructB& obj) {
  using apache::thrift::to_string;
  out << "StructB(";
  out << "aa="; (obj.__isset.aa ? (out << to_string(obj.aa)) : (out << "<null>"));
  out << ", " << "ab=" << to_string(obj.ab);
  out << ")";
  return out;
}

}} // namespace
